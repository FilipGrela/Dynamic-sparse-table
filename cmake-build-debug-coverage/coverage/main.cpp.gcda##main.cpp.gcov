        -:    0:Source:C:/Users/Filip/Documents/Studia/Semestr 2/Algorytmy i struktury danych/Projekty/Dynamic-sparse-table/src/main.cpp
        -:    0:Graph:C:\Users\Filip\Documents\Studia\Semestr 2\Algorytmy i struktury danych\Projekty\Dynamic-sparse-table\cmake-build-debug-coverage\CMakeFiles\Dynamic_sparse_table.dir\src\main.cpp.gcno
        -:    0:Data:C:\Users\Filip\Documents\Studia\Semestr 2\Algorytmy i struktury danych\Projekty\Dynamic-sparse-table\cmake-build-debug-coverage\CMakeFiles\Dynamic_sparse_table.dir\src\main.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Filip Grela on 25/05/2025.
        -:    3://
        -:    4:
        -:    5:#include <iostream>
        -:    6:
        -:    7:#include "Trie.h"
        -:    8:
function _Z9readInputRiS_S_RsS0_ called 1 returned 100% blocks executed 100%
        1:    9:void readInput(int &numberOtTests, int &minimumValue, int &maximumValue, short &rootNodes, short &childNodes) {
        1:   10:    std::ios::sync_with_stdio(false);
        1:   10-block  0
call    0 returned 1
        1:   11:    std::cin.tie(nullptr);
call    0 returned 1
        1:   12:    std::cin >> numberOtTests;
call    0 returned 1
        1:   13:    std::cin >> minimumValue >> maximumValue;
call    0 returned 1
call    1 returned 1
        1:   14:    std::cin >> rootNodes >> childNodes;
call    0 returned 1
call    1 returned 1
        1:   15:    std::cin.ignore(1, '\n');
call    0 returned 1
        1:   16:}
        -:   17:
function _Z9testCasesP4TrieIiE called 180002 returned 100% blocks executed 38%
   180002:   18:void testCases(Trie<int> *trie) {
        -:   19:    char command;
        -:   20:    int value;
   180002:   21:    std::cin >> command;
   180002:   21-block  0
call    0 returned 180002
branch  1 taken 180002 (fallthrough)
branch  2 taken 0 (throw)
        -:   22:
   180002:   23:    switch (command) {
   180002:   23-block  0
branch  0 taken 0
branch  1 taken 180002
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
    #####:   24:        case 'P':
    #####:   25:            trie->print();
    %%%%%:   25-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   26:            break;
    %%%%%:   26-block  0
   180002:   27:        case 'I':
   180002:   28:            std::cin >> value;
   180002:   28-block  0
call    0 returned 180002
branch  1 taken 180002 (fallthrough)
branch  2 taken 0 (throw)
   180002:   29:            if (!trie->insert(value))
   180002:   29-block  0
call    0 returned 180002
branch  1 taken 180002 (fallthrough)
branch  2 taken 0 (throw)
   180002:   29-block  1
branch  3 taken 177969 (fallthrough)
branch  4 taken 2033
   177969:   30:                printf("%d exist\n", value);
   177969:   30-block  0
call    0 returned 177969
branch  1 taken 177969 (fallthrough)
branch  2 taken 0 (throw)
        -:   31:
   180002:   32:            break;
   180002:   32-block  0
    #####:   33:        case 'L':
    #####:   34:            std::cin >> value;
    %%%%%:   34-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   35:            if (trie->search(value))
    %%%%%:   35-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:   35-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:   36:                printf("%d exist\n", value);
    %%%%%:   36-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:   37:            else
    #####:   38:                printf("%d not exist\n", value);
    %%%%%:   38-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   39:            break;
    %%%%%:   39-block  0
    #####:   40:        case 'D':
    #####:   41:            std::cin >> value;
    %%%%%:   41-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:   42:            if (!trie->remove(value)) {
    %%%%%:   42-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:   42-block  1
branch  3 never executed (fallthrough)
branch  4 never executed
    #####:   43:                printf("%d not exist\n", value);
    %%%%%:   43-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:   44:            }
    #####:   45:            break;
    %%%%%:   45-block  0
    #####:   46:        default:
    #####:   47:            fprintf(stderr, "Unknown command: %c\n", command);
    %%%%%:   47-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:   47-block  1
call    3 never executed
        -:   48:    }
   180002:   49:}
   180002:   49-block  0
        -:   50:
function main called 1 returned 100% blocks executed 81%
        1:   51:int main() {
        -:   52:    int numberOtTests;
        -:   53:    int minimumValue, maximumValue;
        -:   54:    short rootNodes, childNodes;
        -:   55:
        1:   56:    readInput(numberOtTests, minimumValue, maximumValue, rootNodes, childNodes);
        1:   56-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   57:
        1:   58:    Trie<int> *trie = new Trie<int>(rootNodes, childNodes);
        1:   58-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   58-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:   58-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:   58-block  3
call    8 never executed
        -:   59:
        -:   60:
   180003:   61:    for (int i = 0; i < numberOtTests; i++) {
        1:   61-block  0
   180002:   61-block  1
   180003:   61-block  2
branch  0 taken 180002
branch  1 taken 1 (fallthrough)
   180002:   62:        testCases(trie);
   180002:   62-block  0
call    0 returned 180002
branch  1 taken 180002 (fallthrough)
branch  2 taken 0 (throw)
        -:   63:    }
        -:   64:
        1:   65:    delete trie;
        1:   65-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   65-block  1
call    2 returned 1
call    3 returned 1
        1:   66:    return 0;
        1:   66-block  0
        -:   67:}
